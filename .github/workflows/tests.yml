name: Tests

on:
  pull_request:
  push:
    branches:
      - master
      - main

jobs:
  build:
    name: ${{ matrix.target }} ${{ matrix.build_type }}
    runs-on: ubuntu-latest
    container: discourse/discourse_test:release
    timeout-minutes: 60

    env:
      DISCOURSE_HOSTNAME: www.example.com
      RUBY_GLOBAL_METHOD_CACHE_SIZE: 131072
      RAILS_ENV: test
      PGHOST: postgres
      PGUSER: discourse
      PGPASSWORD: discourse

    strategy:
      fail-fast: false

      matrix:
        build_type: [backend, frontend, annotations]
        target: [core, plugins]
        postgres: ["13"]
        redis: ["6.x"]
        exclude:
          - build_type: annotations
            target: plugins

    services:
      postgres:
        image: postgres:${{ matrix.postgres }}
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: discourse
          POSTGRES_PASSWORD: discourse
          POSTGRES_DB: discourse_test
        options: >-
          --mount type=tmpfs,destination=/var/lib/postgresql/data
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@master
        with:
          fetch-depth: 1

      - name: Setup Git
        run: |
          git config --global user.email "ci@ci.invalid"
          git config --global user.name "Discourse CI"

      - name: Setup redis
        uses: shogo82148/actions-setup-redis@v1
        with:
          redis-version: ${{ matrix.redis }}

      - name: Bundler cache
        uses: actions/cache@v2
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gem-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gem-

      - name: Setup gems
        run: |
          bundle config --local path vendor/bundle
          bundle config --local deployment true
          bundle config --local without development
          bundle install --jobs 4
          bundle clean

      - name: Get yarn cache directory
        id: yarn-cache-dir
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Yarn cache
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Yarn install
        run: yarn install

      - name: Checkout official plugins
        if: matrix.target == 'plugins'
        run: bin/rake plugin:install_all_official

      - name: Create database
        run: |
          bin/rake db:create
          bin/rake db:migrate

      - name: Create parallel databases
        if: matrix.build_type == 'backend' && matrix.target == 'core'
        run: |
          bin/rake parallel:create
          bin/rake parallel:migrate

      - name: Core RSpec
        if: matrix.build_type == 'backend' && matrix.target == 'core'
        run: bin/turbo_rspec --verbose

      - name: Plugin RSpec
        if: matrix.build_type == 'backend' && matrix.target == 'plugins'
        run: bin/rake plugin:spec

      - name: Core QUnit
        if: matrix.build_type == 'frontend' && matrix.target == 'core'
        run: bin/rake qunit:test['1200000']
        timeout-minutes: 30

      - name: Wizard QUnit
        if: matrix.build_type == 'frontend' && matrix.target == 'core'
        run: bin/rake qunit:test['600000','/wizard/qunit']
        timeout-minutes: 10

      - name: Plugin QUnit
        if: matrix.build_type == 'frontend' && matrix.target == 'plugins'
        run: bin/rake plugin:qunit['*','1200000']
        timeout-minutes: 30

      - name: Check Annotations
        if: matrix.build_type == 'annotations'
        run: |
          bin/rake annotate:ensure_all_indexes
          bin/annotate --models --model-dir app/models

          if [ ! -z "$(git status --porcelain app/models/)" ]; then
            echo "Core annotations are not up to date. To resolve, run:"
            echo "  bin/rake annotate:clean"
            echo
            echo "Or manually apply the diff printed below:"
            echo "---------------------------------------------"
            git -c color.ui=always diff app/models/
            exit 1
          fi
        timeout-minutes: 30
